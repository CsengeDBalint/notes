Front-End-Application


REVIEW

Arrow functions:
(https://www.sitepoint.com/es6-arrow-functions-new-fat-concise-syntax-javascript/)
*ES6
*more concise syntax for writing function expressions
*They utilize a new token, =>
*they are anonymous and change the way this binds in functions
*they make our code more concise, and simplify function scoping and the 'this' keyword
*using them we avoid having the 'function' and 'return' keyword (it’s implicit in arrow functions), and curly brackets



Basic Syntax with Multiple Parameters:
/ (param1, param2, paramN) => expression

// ES5
var multiplyES5 = function(x, y) {
  return x * y;
};

// ES6
const multiplyES6 = (x, y) => { return x * y };

Curly brackets aren’t required if only one expression is present.
The preceding example could also be written as:
const multiplyES6 = (x, y) => x * y;


No Parameters
Parentheses are required when no parameters are present.

//ES5
var docLogEs5 = function docLog() {
    console.log(document);
};

//ES6
var docLogEs6 = () => { console.log(document); };
docLogEs6(); // #document... <html> ….


Object Literal Syntax
Arrow functions, like function expressions, can be used to return an object literal expression. 
The only caveat is that the body needs to be wrapped in parentheses, 
in order to distinguish between a block and an object (both of which use curly brackets).

//ES5
var setNameIdsEs5 = function setNameIds(id, name) {
  return {
    id: id,
    name: name
  };
};

// ES6
var setNameIdsEs6 = (id, name) => ({ id: id, name: name });

console.log(setNameIdsEs6 (4, "Kyle"));   // Object {id: 4, name: "Kyle"} 

Use Cases for Arrow Functions:

One common use case for arrow functions is array manipulation and the like.
It’s common that you’ll need to map or reduce an array.
We could create an array of objects with just the names or prices by doing this in ES5:

// ES5
var prices = smartPhones.map(function(smartPhone) {
  return smartPhone.price;
});

console.log(prices); // [649, 576, 489]
An arrow function is more concise and easier to read:

// ES6
const prices = smartPhones.map(smartPhone => smartPhone.price);
console.log(prices); // [649, 576, 489]


Promises and Callbacks:
When using promises, 'function' and 'return' function expressions will be used for chaining.
// ES5
aAsync().then(function() {
  returnbAsync();
}).then(function() {
  returncAsync();
}).done(function() {
  finish();
});
This code is simplified, and arguably easier to read using arrow functions:

// ES6
aAsync().then(() => bAsync()).then(() => cAsync()).done(() => finish);
You can use function expressions if you need a dynamic 'this' and arrow functions for a lexical 'this'.

Gotchas and Pitfalls of Arrow Functions
*'This':
he 'this' keyword works differently in arrow functions. The methods call(), apply(), and bind() will not change the value of this in arrow functions. 
(In fact, the value of this inside a function simply can’t be changed; it will be the same value as when the function was called.) 
If you need to bind to a different value, you’ll need to use a function expression.

*Constructors
Arrow functions can’t be used as constructors as other functions can. Don’t use them to create similar objects, if you attempt to use new with an arrow function, it will throw an error. 
Arrow functions, like built-in functions (aka methods), don’t have a prototype property or other internal methods. 
Because constructors are generally used to create class-like objects in JavaScript, you should use the new ES6 classes instead.

*Generators
Arrow functions are designed to be lightweight and can’t be used as generators. Use ES6 generators instead.

*Arguments object
Arrow functions don’t have the local variable arguments as do other functions. 
(The arguments object is an array-like object that allows developers to dynamically discover and access a function’s arguments. 
Arrow functions do not have this object.)


Where To Use Arrow Functions:

*Use function in the global scope and for Object.prototype properties.
*Use class for object constructors.
*Use => everywhere else.